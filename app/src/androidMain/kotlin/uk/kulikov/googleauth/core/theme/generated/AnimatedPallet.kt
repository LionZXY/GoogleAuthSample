package uk.kulikov.googleauth.core.theme.generated

import androidx.compose.animation.animateColorAsState
import androidx.compose.animation.core.AnimationSpec
import androidx.compose.animation.core.tween
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color
import uk.kulikov.googleauth.core.theme.generated.BusyBarPallet.Background
import uk.kulikov.googleauth.core.theme.generated.BusyBarPallet.Bluetooth
import uk.kulikov.googleauth.core.theme.generated.BusyBarPallet.Brand
import uk.kulikov.googleauth.core.theme.generated.BusyBarPallet.Danger
import uk.kulikov.googleauth.core.theme.generated.BusyBarPallet.Invert
import uk.kulikov.googleauth.core.theme.generated.BusyBarPallet.Neutral
import uk.kulikov.googleauth.core.theme.generated.BusyBarPallet.OnColor
import uk.kulikov.googleauth.core.theme.generated.BusyBarPallet.Success
import uk.kulikov.googleauth.core.theme.generated.BusyBarPallet.Transparent
import uk.kulikov.googleauth.core.theme.generated.BusyBarPallet.Transparent.Black
import uk.kulikov.googleauth.core.theme.generated.BusyBarPallet.Transparent.White
import uk.kulikov.googleauth.core.theme.generated.BusyBarPallet.Warning
import uk.kulikov.googleauth.core.theme.generated.BusyBarPallet.Wifi
import kotlin.Int
import kotlin.Suppress

private const val ANIMATION_DURATION_MS: Int = 750

private val animationSpec: AnimationSpec<Color> = tween(ANIMATION_DURATION_MS)

@Composable
private fun animatedColor(targetValue: Color): Color = animateColorAsState(targetValue =
    targetValue, animationSpec = animationSpec
).value

/**
 * Autogenerated code from https://github.com/LionZXY/FlipperPalletGenerator/
 */
@Suppress("LongMethod")
@Composable
internal fun BusyBarPallet.toAnimatePallet(): BusyBarPallet = BusyBarPallet(
  invert = Invert(
    black = animatedColor(invert.black),
    white = animatedColor(invert.white)
  ),
  transparent = Transparent(
    black = Black(
      primary = animatedColor(transparent.black.primary),
      secondary = animatedColor(transparent.black.secondary),
      tertiary = animatedColor(transparent.black.tertiary),
      quaternary = animatedColor(transparent.black.quaternary),
      quinary = animatedColor(transparent.black.quinary)
    ),
    white = White(
      primary = animatedColor(transparent.white.primary),
      secondary = animatedColor(transparent.white.secondary),
      tertiary = animatedColor(transparent.white.tertiary),
      quaternary = animatedColor(transparent.white.quaternary),
      quinary = animatedColor(transparent.white.quinary)
    )
  ),
  neutral = Neutral(
    primary = animatedColor(neutral.primary),
    secondary = animatedColor(neutral.secondary),
    tertiary = animatedColor(neutral.tertiary),
    quaternary = animatedColor(neutral.quaternary),
    quinary = animatedColor(neutral.quinary),
    senary = animatedColor(neutral.senary),
    septenary = animatedColor(neutral.septenary)
  ),
  background = Background(
    primary = animatedColor(background.primary),
    secondary = animatedColor(background.secondary),
    tertiary = animatedColor(background.tertiary)
  ),
  brand = Brand(
    primary = animatedColor(brand.primary),
    secondary = animatedColor(brand.secondary),
    tertiary = animatedColor(brand.tertiary)
  ),
  bluetooth = Bluetooth(
    primary = animatedColor(bluetooth.primary),
    secondary = animatedColor(bluetooth.secondary),
    tertiary = animatedColor(bluetooth.tertiary)
  ),
  wifi = Wifi(
    primary = animatedColor(wifi.primary),
    secondary = animatedColor(wifi.secondary),
    tertiary = animatedColor(wifi.tertiary)
  ),
  success = Success(
    primary = animatedColor(success.primary),
    secondary = animatedColor(success.secondary),
    tertiary = animatedColor(success.tertiary)
  ),
  danger = Danger(
    primary = animatedColor(danger.primary),
    secondary = animatedColor(danger.secondary),
    tertiary = animatedColor(danger.tertiary)
  ),
  warning = Warning(
    primary = animatedColor(warning.primary),
    secondary = animatedColor(warning.secondary),
    tertiary = animatedColor(warning.tertiary)
  ),
  onColor = OnColor(
    black = animatedColor(onColor.black),
    white = animatedColor(onColor.white)
  )
)
